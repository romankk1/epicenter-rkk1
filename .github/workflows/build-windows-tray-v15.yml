name: Build Windows Tray v15 (force no Vulkan)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    env:
      # Blocca eventuali rilevamenti runtime
      WHISPER_VULKAN: "0"
      GGML_NO_VULKAN: "1"
      WHISPER_DONT_GENERATE_BINDINGS: "1"
      NODE_ENV: "production"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install deps (root)
        run: |
          bun install --frozen-lockfile
          Write-Host "âœ… Root deps installed"

      - name: Ensure tauri CLI
        run: |
          bun add -g @tauri-apps/cli
          Write-Host "âœ… Tauri CLI installed"

      # --- PRE-PATCHS: shim ffmpeg + piccoli fix ---
      - name: Pre-patch (FFmpeg shim + small normalizations)
        run: |
          # 1) Crea/aggiorna lo shim di check-ffmpeg (nel path corretto)
          $ffmpegPath = "apps/whispering/src/routes/(config)/+layout/check-ffmpeg.ts"
          $ffmpegDir = Split-Path $ffmpegPath
          if (-not (Test-Path $ffmpegDir)) { New-Item -ItemType Directory -Force -Path $ffmpegDir | Out-Null }

          $b64 = "ZXhwb3J0IHR5cGUgRmZtcGVnQ2hlY2sgPSB7IGF2YWlsYWJsZTogYm9vbGVhbjsgdmVyc2lvbj86IHN0cmluZzsgZXJyb3I/OiBzdHJpbmcgfTsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0ZmbXBlZygpOiBQcm9taXNlPEZmbXBlZ0NoZWNrPiB7IHJldHVybiB7IGF2YWlsYWJsZTogdHJ1ZSwgdmVyc2lvbjogIkNJIiB9OyB9CmV4cG9ydCBmdW5jdGlvbiBoYXNOYXZpZ2F0b3JMb2NhbFRyYW5zY3JpcHRpb25Jc3N1ZSgpOiBib29sZWFuIHsgcmV0dXJuIGZhbHNlOyB9CmV4cG9ydCBkZWZhdWx0IGNoZWNrRmZtcGVnOwo="
          $content = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($b64))
          Set-Content -Path $ffmpegPath -Value $content -NoNewline
          Write-Host "âœ… FFmpeg shim at $ffmpegPath"

          # 2) Piccole normalizzazioni note
          $files = @(
            "apps/whispering/src/lib/services/recorder/navigator.ts",
            "apps/whispering/src/lib/query/transformer.ts",
            "apps/whispering/src/lib/query/commands.ts"
          )
          foreach ($f in $files) {
            if (Test-Path $f) {
              $src = Get-Content $f -Raw
              $src = $src -replace "(?m)^\s*(export\s+)?const\s+TIMESLICE_MS\b[^\r\n]*", ""
              $src = $src -replace "(?m)^\s*import\s+\{[^\}]*\}\s+from\s+[`"']wellcrafted/result[`"']\s*;", "import { Err, Ok, type Result, isErr } from 'wellcrafted/result';"
              $src = $src -replace "(?m)^\s*import\s+\{[^\}]*\}\s+from\s+[`"']wellcrafted/error[`"']\s*;", "import { createTaggedError, extractErrorMessage } from 'wellcrafted/error';"
              Set-Content -Path $f -Value $src -NoNewline
              Write-Host "ðŸ§© Patched: $f"
            }
          }

      # --- DISABILITA DAVVERO VULKAN: forza default-features = false su whisper-rs e whisper-rs-sys ---
      - name: Force-disable Vulkan features in Cargo.toml
        run: |
          $cargo = "apps/whispering/src-tauri/Cargo.toml"
          if (-not (Test-Path $cargo)) { throw "Cargo.toml non trovato: $cargo" }
          $text = Get-Content $cargo -Raw

          # 1) Se la dipendenza Ã¨ in forma semplice, trasformala in tabellare con default-features=false
          #    whisper-rs
          $text = $text -replace '(?m)^\s*whisper-rs\s*=\s*["''][^"'']+["'']\s*$', 'whisper-rs = { version = "0.11.1", default-features = false, features = [] }'
          #    whisper-rs-sys
          $text = $text -replace '(?m)^\s*whisper-rs-sys\s*=\s*["''][^"'']+["'']\s*$', 'whisper-rs-sys = { version = "0.11.1", default-features = false, features = [] }'

          # 2) Se esistono giÃ  in formato oggetto, forza default-features=false e rimuovi qualunque feature vulkan
          #    whisper-rs
          $text = $text -replace '(?ms)whisper-rs\s*=\s*\{[^\}]*\}', {
            param($m)
            $blk = $m.Value
            $blk = $blk -replace 'default-features\s*=\s*(true|false)', 'default-features = false'
            if ($blk -notmatch 'default-features') { $blk = $blk.TrimEnd('}') + ', default-features = false }' }
            # rimuovi "vulkan" da features
            $blk = $blk -replace '(?ms)features\s*=\s*\[([^\]]*)\]', {
              param($n)
              $lst = $n.Groups[1].Value -replace '["'']vulkan["'']\s*,?', '' -replace ',\s*,', ',' -replace '^\s*,|\s*,\s*$', ''
              "features = [${lst}]"
            }
            return $blk
          }

          #    whisper-rs-sys
          $text = $text -replace '(?ms)whisper-rs-sys\s*=\s*\{[^\}]*\}', {
            param($m)
            $blk = $m.Value
            $blk = $blk -replace 'default-features\s*=\s*(true|false)', 'default-features = false'
            if ($blk -notmatch 'default-features') { $blk = $blk.TrimEnd('}') + ', default-features = false }' }
            $blk = $blk -replace '(?ms)features\s*=\s*\[([^\]]*)\]', {
              param($n)
              $lst = $n.Groups[1].Value -replace '["'']vulkan["'']\s*,?', '' -replace ',\s*,', ',' -replace '^\s*,|\s*,\s*$', ''
              "features = [${lst}]"
            }
            return $blk
          }

          # 3) In qualunque caso, togli riferimenti residuali a "vulkan" (sicurezza)
          $text = $text -replace '(?i)vulkan', ''

          Set-Content -Path $cargo -Value $text -NoNewline
          Write-Host "âœ… Cargo.toml patched to disable Vulkan in whisper-rs & whisper-rs-sys"

      # --- BUILD SOLO WHISPERING ---
      - name: Build Whispering (SSR bundle)
        working-directory: apps/whispering
        run: |
          bun run build
          Write-Host "âœ… Svelte/Vite SSR built"

      - name: Build Tauri app (CPU only)
        working-directory: apps/whispering
        run: |
          bun x tauri build
        env:
          WHISPER_VULKAN: "0"
          GGML_NO_VULKAN: "1"
          WHISPER_DONT_GENERATE_BINDINGS: "1"
          NODE_ENV: "production"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-tray-build-no-vulkan
          path: apps/whispering/src-tauri/target/release/*.exe
