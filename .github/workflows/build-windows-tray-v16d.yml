name: Build Windows Tray v17c (CPU-only, no Vulkan, robust patch)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    env:
      NODE_ENV: production
      WHISPER_DONT_USE_VULKAN: "1"
      WHISPER_RS_SYS_NO_VULKAN: "1"
      WHISPER_RS_NO_VULKAN: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Tauri CLI (global)
        run: |
          bun add -g @tauri-apps/cli
          tauri -V

      - name: Add FFmpeg check shim (line-by-line)
        run: |
          $ffmpegPath = "apps/whispering/src/routes/(config)/+layout/check-ffmpeg.ts"
          $ffmpegDir  = Split-Path $ffmpegPath
          if (-not (Test-Path $ffmpegDir)) { New-Item -ItemType Directory -Force -Path $ffmpegDir | Out-Null }
          Set-Content -Path $ffmpegPath -Value 'export type FfmpegCheck = { available: boolean; version?: string; error?: string };' -Encoding UTF8
          Add-Content -Path $ffmpegPath -Value ''
          Add-Content -Path $ffmpegPath -Value 'export async function checkFfmpeg(): Promise<FfmpegCheck> {'
          Add-Content -Path $ffmpegPath -Value '  return { available: true, version: "CI" };'
          Add-Content -Path $ffmpegPath -Value '}'
          Add-Content -Path $ffmpegPath -Value 'export function hasNavigatorLocalTranscriptionIssue(): boolean {'
          Add-Content -Path $ffmpegPath -Value '  return false;'
          Add-Content -Path $ffmpegPath -Value '}'
          Add-Content -Path $ffmpegPath -Value 'export default checkFfmpeg;'
          Write-Host "âœ… Shim scritto in $ffmpegPath"

      - name: Disable Vulkan features in Cargo.toml (CPU-only, robust)
        working-directory: apps/whispering/src-tauri
        run: |
          $file = "Cargo.toml"
          if (-not (Test-Path $file)) { throw "Cargo.toml non trovato in $(Get-Location)" }
          $text = Get-Content $file -Raw

          # 1) Rimuovi tutti i token "vulkan" ovunque nel TOML (sia inline che multiline)
          $before = $text
          $text = $text -replace '(?i)"vulkan"\s*,\s*', ''   # "vulkan",   -> rimosso
          $text = $text -replace '(?i),\s*"vulkan"\s*', ''   # , "vulkan"  -> rimosso
          $text = $text -replace '(?i)"vulkan"\s*', ''       # "vulkan"    -> rimosso (ultimo elemento)
          # Pulisci virgole doppie o virgole prima della chiusura di array
          $text = $text -replace ',\s*,', ','                # ,, -> ,
          $text = $text -replace ',\s*\]', ' ]'              # ,] -> ]
          $text = $text -replace '\[\s*,', '['               # [, -> [
          if ($text -ne $before) { Write-Host "ðŸ§¹ Rimossi riferimenti a \"vulkan\" da Cargo.toml" }

          # Helper: forza default-features=false in blocchi inline { ... } della dipendenza
          function Force-InlineDefaultFalse([string]$toml, [string]$pkg){
            $pattern = "(?ms)^\s*$([regex]::Escape($pkg))\s*=\s*\{[^}]*\}"
            return ($toml -replace $pattern, {
              param($m)
              $blk = $m.Value
              if ($blk -notmatch '(?i)default-features\s*='){
                $blk = $blk -replace '\}\s*$', ', default-features = false }'
              } else {
                $blk = $blk -replace '(?i)default-features\s*=\s*\w+', 'default-features = false'
              }
              $blk
            })
          }

          # Helper: forza default-features=false in blocchi a sezione [dependencies.pkg]
          function Force-TableDefaultFalse([string]$toml, [string]$pkg){
            $section = "(?ms)^\s*\[\s*dependencies\s*\.\s*$([regex]::Escape($pkg))\s*\]\s*(.*?)\s*(?=^\s*\[|\Z)"
            return ($toml -replace $section, {
              param($m)
              $head = $m.Groups[0].Value.Substring(0, $m.Groups[0].Value.IndexOf($m.Groups[1].Value))
              $body = $m.Groups[1].Value
              if ($body -notmatch '(?i)^\s*default-features\s*=' ){
                $body = ($body.TrimEnd() + "`r`n" + 'default-features = false' + "`r`n")
              } else {
                $body = $body -replace '(?i)default-features\s*=\s*\w+', 'default-features = false'
              }
              "[dependencies.$pkg]`r`n$body"
            })
          }

          # 2) Applica a whisper-rs e whisper-rs-sys (inline e/o a blocchi)
          $text = Force-InlineDefaultFalse $text 'whisper-rs'
          $text = Force-InlineDefaultFalse $text 'whisper-rs-sys'
          $text = Force-TableDefaultFalse  $text 'whisper-rs'
          $text = Force-TableDefaultFalse  $text 'whisper-rs-sys'

          Set-Content -Path $file -Value $text -Encoding UTF8
          Write-Host "âœ… Cargo.toml patchato per CPU-only (no Vulkan)"

      - name: Install JS deps (root)
        run: |
          bun install --frozen-lockfile
          Write-Host "âœ… Root deps installed"

      - name: Build Whispering (SSR only)
        working-directory: apps/whispering
        run: |
          bun run build
          Write-Host "âœ… Whispering SSR built"

      - name: Build Tauri (Windows, CPU-only)
        working-directory: apps/whispering
        env:
          NODE_ENV: production
          WHISPER_DONT_USE_VULKAN: ${{ env.WHISPER_DONT_USE_VULKAN }}
          WHISPER_RS_SYS_NO_VULKAN: ${{ env.WHISPER_RS_SYS_NO_VULKAN }}
          WHISPER_RS_NO_VULKAN: ${{ env.WHISPER_RS_NO_VULKAN }}
        run: |
          tauri build
          Write-Host "âœ… Tauri build done (CPU-only)"

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: whispering-windows-with-tray
          path: apps/whispering/src-tauri/target/release/*.exe
