name: Build Windows Tray v17 (CPU-only, no Vulkan)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    env:
      NODE_ENV: production
      # Hard-kill any attempt to use Vulkan in build scripts
      WHISPER_DONT_USE_VULKAN: "1"
      WHISPER_RS_SYS_NO_VULKAN: "1"
      WHISPER_RS_NO_VULKAN: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Tauri CLI (global)
        run: |
          bun add -g @tauri-apps/cli
          tauri -V

      # Shim FFmpeg check to avoid missing-file import during SSR build
      - name: Add FFmpeg check shim (line-by-line)
        run: |
          $ffmpegPath = "apps/whispering/src/routes/(config)/+layout/check-ffmpeg.ts"
          $ffmpegDir  = Split-Path $ffmpegPath
          if (-not (Test-Path $ffmpegDir)) { New-Item -ItemType Directory -Force -Path $ffmpegDir | Out-Null }
          Set-Content -Path $ffmpegPath -Value 'export type FfmpegCheck = { available: boolean; version?: string; error?: string };' -Encoding UTF8
          Add-Content -Path $ffmpegPath -Value ''
          Add-Content -Path $ffmpegPath -Value 'export async function checkFfmpeg(): Promise<FfmpegCheck> {'
          Add-Content -Path $ffmpegPath -Value '  return { available: true, version: "CI" };'
          Add-Content -Path $ffmpegPath -Value '}'
          Add-Content -Path $ffmpegPath -Value 'export function hasNavigatorLocalTranscriptionIssue(): boolean {'
          Add-Content -Path $ffmpegPath -Value '  return false;'
          Add-Content -Path $ffmpegPath -Value '}'
          Add-Content -Path $ffmpegPath -Value 'export default checkFfmpeg;'
          Write-Host "✅ Shim scritto in $ffmpegPath"

      # Patch Cargo.toml to ensure Vulkan feature is disabled
      - name: Disable Vulkan features in Cargo.toml (CPU-only)
        working-directory: apps/whispering/src-tauri
        run: |
          $file = "Cargo.toml"
          if (-not (Test-Path $file)) { throw "Cargo.toml non trovato in $(Get-Location)" }
          $text = Get-Content $file -Raw

          # 1) Rimuovi "vulkan" dalle liste features (whisper-rs o whisper-rs-sys)
          $text = $text -replace 'features\s*=\s*\[([^\]]*?)\]', {
            param($m)
            $inner = $m.Groups[1].Value
            # togli eventuali "vulkan"
            $clean = ($inner -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ -notmatch '"vulkan"' }
            'features = [' + ($clean -join ', ') + ']'
          }

          # 2) Assicurati default-features = false sui pacchetti whisper-rs e whisper-rs-sys
          function EnsureDefaultFeaturesFalse($toml, $pkg) {
            # cerca la riga del pacchetto in forma inline table: pkg = { ... }
            $pattern = "(?ms)^\s*$pkg\s*=\s*\{[^}]*\}"
            if ($toml -match $pattern) {
              $toml = $toml -replace $pattern, {
                param($mm)
                $blk = $mm.Value
                if ($blk -notmatch 'default-features\s*=') {
                  # inserisci default-features=false prima della chiusura
                  $blk = $blk -replace '\}\s*$', ', default-features = false }'
                } else {
                  # forza a false
                  $blk = $blk -replace 'default-features\s*=\s*\w+', 'default-features = false'
                }
                $blk
              }
            }
            return $toml
          }

          $text = EnsureDefaultFeaturesFalse $text 'whisper-rs'
          $text = EnsureDefaultFeaturesFalse $text 'whisper-rs-sys'

          # 3) Salva solo se cambiato
          Set-Content -Path $file -Value $text -Encoding UTF8
          Write-Host "✅ Cargo.toml patchato per CPU-only (no Vulkan)"

      - name: Install JS deps (root)
        run: |
          bun install --frozen-lockfile
          Write-Host "✅ Root deps installed"

      - name: Build Whispering (SSR only)
        working-directory: apps/whispering
        run: |
          bun run build
          Write-Host "✅ Whispering SSR built"

      - name: Build Tauri (Windows, CPU-only)
        working-directory: apps/whispering
        env:
          NODE_ENV: production
          WHISPER_DONT_USE_VULKAN: ${{ env.WHISPER_DONT_USE_VULKAN }}
          WHISPER_RS_SYS_NO_VULKAN: ${{ env.WHISPER_RS_SYS_NO_VULKAN }}
          WHISPER_RS_NO_VULKAN: ${{ env.WHISPER_RS_NO_VULKAN }}
        run: |
          tauri build
          Write-Host "✅ Tauri build done (CPU-only)"

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: whispering-windows-with-tray
          path: apps/whispering/src-tauri/target/release/*.exe
