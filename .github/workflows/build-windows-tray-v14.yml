name: Build Windows Tray v14 (no Vulkan)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    env:
      # Disabilita esplicitamente qualsiasi tentativo di usare Vulkan
      WHISPER_VULKAN: "0"
      GGML_NO_VULKAN: "1"
      WHISPER_DONT_GENERATE_BINDINGS: "1"
      NODE_ENV: "production"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install deps (root)
        run: |
          bun install --frozen-lockfile
          Write-Host "âœ… Root deps installed"

      - name: Ensure tauri CLI
        run: |
          bun add -g @tauri-apps/cli
          Write-Host "âœ… Tauri CLI installed"

      # --- PRE-PATCHS: shim ffmpeg e piccoli fix non invasivi ---
      - name: Pre-patch (FFmpeg shim + piccole normalizzazioni)
        run: |
          # 1) Crea/aggiorna lo shim di check-ffmpeg
          $ffmpegPath = "apps/whispering/src/routes/(config)/+layout/check-ffmpeg.ts"
          $ffmpegDir = Split-Path $ffmpegPath
          if (-not (Test-Path $ffmpegDir)) { New-Item -ItemType Directory -Force -Path $ffmpegDir | Out-Null }

          $b64 = "ZXhwb3J0IHR5cGUgRmZtcGVnQ2hlY2sgPSB7IGF2YWlsYWJsZTogYm9vbGVhbjsgdmVyc2lvbj86IHN0cmluZzsgZXJyb3I/OiBzdHJpbmcgfTsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0ZmbXBlZygpOiBQcm9taXNlPEZmbXBlZ0NoZWNrPiB7IHJldHVybiB7IGF2YWlsYWJsZTogdHJ1ZSwgdmVyc2lvbjogIkNJIiB9OyB9CmV4cG9ydCBmdW5jdGlvbiBoYXNOYXZpZ2F0b3JMb2NhbFRyYW5zY3JpcHRpb25Jc3N1ZSgpOiBib29sZWFuIHsgcmV0dXJuIGZhbHNlOyB9CmV4cG9ydCBkZWZhdWx0IGNoZWNrRmZtcGVnOwo="
          $content = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($b64))
          Set-Content -Path $ffmpegPath -Value $content -NoNewline
          Write-Host "âœ… FFmpeg shim at $ffmpegPath"

          # 2) Rimuovi eventuali dichiarazioni duplicate/strane e normalizza import noti
          $files = @(
            "apps/whispering/src/lib/services/recorder/navigator.ts",
            "apps/whispering/src/lib/query/transformer.ts",
            "apps/whispering/src/lib/query/commands.ts"
          )
          foreach ($f in $files) {
            if (Test-Path $f) {
              $src = Get-Content $f -Raw
              # Rimuovi eventuali costanti TIMESLICE_MS locali duplicate
              $src = $src -replace "(?m)^\s*(export\s+)?const\s+TIMESLICE_MS\b[^\r\n]*", ""
              # Normalizza import da wellcrafted/result
              $src = $src -replace "(?m)^\s*import\s+\{[^\}]*\}\s+from\s+[`"']wellcrafted/result[`"']\s*;", "import { Err, Ok, type Result, isErr } from 'wellcrafted/result';"
              # Normalizza import da wellcrafted/error
              $src = $src -replace "(?m)^\s*import\s+\{[^\}]*\}\s+from\s+[`"']wellcrafted/error[`"']\s*;", "import { createTaggedError, extractErrorMessage } from 'wellcrafted/error';"
              Set-Content -Path $f -Value $src -NoNewline
              Write-Host "ðŸ§© Patched: $f"
            }
          }

      # --- DISABILITA LA FEATURE VULKAN NEL CARGO.TOML DI TAURI ---
      - name: Disable Vulkan feature in Tauri Cargo.toml
        run: |
          $cargo = "apps/whispering/src-tauri/Cargo.toml"
          if (-not (Test-Path $cargo)) { throw "Cargo.toml non trovato: $cargo" }
          $text = Get-Content $cargo -Raw

          # Rimuovi eventuale features = ["vulkan", ...]
          $text = $text -replace 'features\s*=\s*\[(?:[^\]]*vulkan[^\]]*)\]', 'features = []'
          # Rimuovi eventuali linee di dipendenza che aggiungono la feature vulkan esplicitamente
          $text = $text -replace '(?m)^(.*whisper-rs.*features\s*=\s*\[[^\]]*vulkan[^\]]*\].*)$', '$1' -replace 'vulkan\s*,?\s*', ''
          Set-Content -Path $cargo -Value $text -NoNewline

          Write-Host "âœ… Vulkan feature disabilitata in Cargo.toml"

      # --- BUILD SOLO DELL'APP WHISPERING ---
      - name: Build Whispering (SSR bundle)
        working-directory: apps/whispering
        run: |
          bun run build
          Write-Host "âœ… Svelte/Vite SSR built"

      - name: Build Tauri app (CPU only)
        working-directory: apps/whispering
        run: |
          bun x tauri build
        env:
          WHISPER_VULKAN: "0"
          GGML_NO_VULKAN: "1"
          WHISPER_DONT_GENERATE_BINDINGS: "1"
          NODE_ENV: "production"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-tray-build-no-vulkan
          path: apps/whispering/src-tauri/target/release/*.exe
