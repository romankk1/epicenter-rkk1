name: Build Windows Tray v8a

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone upstream epicenter (latest main)
        run: |
          git clone https://github.com/epicenter-md/epicenter.git epicenter-up
          cd epicenter-up
          git fetch --all --prune
          git checkout origin/main -B tray-build

      - name: Add tray feature remote & fetch
        run: |
          cd epicenter-up
          git remote add tray https://github.com/vishesh-sachan/epicenter.git
          git fetch tray feature/minimize-to-tray

      - name: Merge tray feature (prefer tray)
        run: |
          cd epicenter-up
          git config user.name "tray-bot"
          git config user.email "tray-bot@users.noreply.github.com"
          git merge --no-edit -X theirs tray/feature/minimize-to-tray || true
          git add -A || true
          git commit -m "Temp merge: upstream main + tray feature for build" || true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable

      - name: Install WiX Toolset
        shell: pwsh
        run: |
          choco install wixtoolset --yes --no-progress || $true
          $candle = (Get-Command candle.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $candle) {
            $guess = Get-ChildItem "C:\Program Files (x86)" -Filter "WiX Toolset v3.*" -Directory -ErrorAction SilentlyContinue |
                     ForEach-Object { Join-Path $_.FullName "bin\candle.exe" } |
                     Where-Object { Test-Path $_ } |
                     Select-Object -First 1
            if ($guess) { $env:Path = "$env:Path;$(Split-Path $guess)" }
          }
          Write-Host "WiX ready"

      - name: Install NSIS
        shell: pwsh
        run: |
          choco install nsis --yes --no-progress
          $p1 = 'C:\Program Files (x86)\NSIS\makensis.exe'
          $p2 = 'C:\Program Files\NSIS\makensis.exe'
          if (Test-Path $p1) { $env:Path = "$env:Path;$(Split-Path $p1)" }
          elseif (Test-Path $p2) { $env:Path = "$env:Path;$(Split-Path $p2)" }
          Write-Host "NSIS ready"

      - name: Cache Bun
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('epicenter-up/**/bun.lock') }}
          restore-keys: ${{ runner.os }}-bun-

      - name: Install deps
        working-directory: epicenter-up
        run: bun install

      - name: Pre-patch (spans, ffmpeg shims, dedupe nanoid, dedupe TIMESLICE_MS)
        working-directory: epicenter-up/apps/whispering
        run: |
          # 1) Fix <span /> in Svelte
          node -e "const fs=require('fs');const p='src/routes/(config)/settings/transcription/+page.svelte';if(fs.existsSync(p)){let s=fs.readFileSync(p,'utf8');s=s.replace(/<span([^>]*)\/>/g,'<span$1></span>');fs.writeFileSync(p,s);console.log('Fixed <span/> in',p);}"

          # 2) Shims per check-ffmpeg (entrambi i percorsi possibili)
          node -e "const fs=require('fs'),path=require('path');const w=t=>{if(!fs.existsSync(t)){fs.mkdirSync(path.dirname(t),{recursive:true});fs.writeFileSync(t,'export type FfmpegCheck={available:boolean;version?:string;error?:string}; export async function checkFfmpeg():Promise<FfmpegCheck>{return{available:true,version:\\\"CI\\\"}}; export default checkFfmpeg;');console.log('Created shim',t);}};w('src/routes/(config)/+layout/check-ffmpeg.ts');w('src/routes/+layout/check-ffmpeg.ts');"

          # 3) DEDUPE nanoid in src/lib/query/commands.ts (tieni solo nanoid/non-secure)
          node -e "const fs=require('fs');const p='src/lib/query/commands.ts';if(fs.existsSync(p)){let s=fs.readFileSync(p,'utf8');let lines=s.split(/\\r?\\n/);let seen=false;lines=lines.filter(l=>{const m=/^\\s*import\\s*\\{\\s*nanoid\\s*\\}\\s*from\\s*['\\\"]nanoid(\\/non-secure)?['\\\"];?\\s*$/.test(l);if(m){if(seen)return false;seen=true;return true;}return true;});s=lines.join('\\n');s=s.replace(/from\\s*['\\\"]nanoid['\\\"]/g,'from \"nanoid/non-secure\"');fs.writeFileSync(p,s);console.log('Deduped nanoid import in',p);}"

          # 4) DEDUPE TIMESLICE_MS in navigator.ts solo se Ã¨ importato dai constants
          node -e "const fs=require('fs');const p='src/lib/services/recorder/navigator.ts';if(fs.existsSync(p)){let s=fs.readFileSync(p,'utf8');if(s.includes(\"from '\\$lib/constants/audio'\") && /\\bconst\\s+TIMESLICE_MS\\b/.test(s)){const out=s.split(/\\r?\\n/).filter(line=>!/^\\s*(export\\s+)?const\\s+TIMESLICE_MS\\b/.test(line)).join('\\n');if(out!==s){fs.writeFileSync(p,out);console.log('Removed local TIMESLICE_MS in',p);}}}"

      - name: Install Tauri CLI
        run: |
          bun add -g @tauri-apps/cli@latest
          bun --version
          tauri -V || true

      - name: Build (Tauri)
        working-directory: epicenter-up/apps/whispering
        env:
          CI: "true"
        run: |
          echo "PATH=$PATH"
          which bun || true
          which tauri || true
          bun tauri build || bunx --bun tauri build

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: whispering-windows-with-tray
          path: |
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.msi
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.exe
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.zip
