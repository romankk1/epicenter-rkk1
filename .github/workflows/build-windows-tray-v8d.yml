name: Build Windows Tray v8k (slim)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone upstream epicenter (latest main)
        run: |
          git clone https://github.com/epicenter-md/epicenter.git epicenter-up
          cd epicenter-up
          git fetch --all --prune
          git checkout origin/main -B tray-build

      - name: Add tray feature remote & merge (prefer tray)
        run: |
          cd epicenter-up
          git config user.name "tray-bot"
          git config user.email "tray-bot@users.noreply.github.com"
          git remote add tray https://github.com/vishesh-sachan/epicenter.git || true
          git fetch tray feature/minimize-to-tray
          git merge --no-edit -X theirs tray/feature/minimize-to-tray || true
          git add -A || true
          git commit -m "Temp merge: upstream main + tray feature for build" || true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable

      - name: Install WiX & NSIS
        shell: pwsh
        run: |
          choco install wixtoolset --yes --no-progress || $true
          choco install nsis --yes --no-progress || $true
          $wix1 = 'C:\Program Files (x86)\WiX Toolset v3.14\bin'
          $wix2 = 'C:\Program Files (x86)\WiX Toolset v3.11\bin'
          $nsis1 = 'C:\Program Files (x86)\NSIS'
          $nsis2 = 'C:\Program Files\NSIS'
          foreach ($p in @($wix1,$wix2,$nsis1,$nsis2)) { if (Test-Path $p) { $env:Path += ';' + $p } }
          Write-Host "WiX/NSIS PATH ok"

      - name: Install deps
        working-directory: epicenter-up
        run: bun install

      - name: Prepatch (simple)
        working-directory: epicenter-up/apps/whispering
        run: |
          set -e

          # Fix <span />
          F="src/routes/(config)/settings/transcription/+page.svelte"
          if [ -f "$F" ]; then
            sed -E -i 's#<span([^>]*)/>#<span\1></span>#g' "$F"
            echo "Fixed <span/> in $F"
          fi

          # Create check-ffmpeg shims (both paths) with the missing export
          mkshim() {
            tgt="$1"
            if [ ! -f "$tgt" ]; then
              mkdir -p "$(dirname "$tgt")"
              printf "%s\n" \
"export type FfmpegCheck = { available: boolean; version?: string; error?: string };" \
"" \
"export async function checkFfmpeg(): Promise<FfmpegCheck> {" \
"  return { available: true, version: 'CI' };" \
"}" \
"" \
"export function hasNavigatorLocalTranscriptionIssue(): boolean {" \
"  return false;" \
"}" \
"" \
"export default checkFfmpeg;" \
              > "$tgt"
              echo "Created shim $tgt"
            fi
          }
          mkshim "src/routes/(config)/+layout/check-ffmpeg.ts"
          mkshim "src/routes/+layout/check-ffmpeg.ts"

          # Dedup commands.ts imports (wellcrafted/result + nanoid)
          C="src/lib/query/commands.ts"
          if [ -f "$C" ]; then
            tmp="$(mktemp)"; grep -v -E "^[[:space:]]*import[[:space:]]*\\{[^}]*\\}[[:space:]]*from[[:space:]]*['\"]wellcrafted/result['\"];?[[:space:]]*$" "$C" > "$tmp" || true; mv "$tmp" "$C"
            sed -i "1i import { Err, Ok } from 'wellcrafted/result';" "$C"
            tmp="$(mktemp)"; grep -v -E "^[[:space:]]*import[[:space:]]*\\{[[:space:]]*nanoid[[:space:]]*\\}[[:space:]]*from[[:space:]]*['\"]nanoid(/non-secure)?['\"];?[[:space:]]*$" "$C" > "$tmp" || true; mv "$tmp" "$C"
            sed -i "1i import { nanoid } from 'nanoid/non-secure';" "$C"
            echo "Patched $C"
          fi

          # Dedup transformer.ts imports (wellcrafted/error + result)
          T="src/lib/query/transformer.ts"
          if [ -f "$T" ]; then
            tmp="$(mktemp)"; grep -v -E "^[[:space:]]*import[[:space:]]*\\{[^}]*\\}[[:space:]]*from[[:space:]]*['\"]wellcrafted/(error|result)['\"];?[[:space:]]*$" "$T" > "$tmp" || true; mv "$tmp" "$T"
            sed -i "1i import { createTaggedError, extractErrorMessage } from 'wellcrafted/error';" "$T"
            sed -i "2i import { Err, Ok, type Result, isErr } from 'wellcrafted/result';" "$T"
            echo "Patched $T"
          fi

      - name: Normalize navigator.ts (safe Node rewrite)
        working-directory: epicenter-up/apps/whispering
        run: |
          set -e
          printf "%s\n" \
"import fs from 'fs';" \
"" \
"const file = 'src/lib/services/recorder/navigator.ts';" \
"if (!fs.existsSync(file)) { console.log('navigator.ts not found, skipping'); process.exit(0); }" \
"let s = fs.readFileSync(file, 'utf8');" \
"" \
"// Remove any local declaration of TIMESLICE_MS" \
"s = s.replace(/^[ \\t]*(export[ \\t]+)?(const|let|var)[ \\t]+TIMESLICE_MS\\b[^\\n]*$/gm, '');" \
"s = s.replace(/^[ \\t]*(export[ \\t]+)?(const|let|var)[ \\t]+\\{[^}]*\\bTIMESLICE_MS\\b[^}]*\\}[ \\t]*=[^\\n]*$/gm, '');" \
"" \
"// Remove TIMESLICE_MS from any import list from $lib/constants/audio" \
"s = s.replace(/import\\s*\\{([\\s\\S]*?)\\}\\s*from\\s*['\"]\\$lib\\/constants\\/audio['\"];?/g, (m, inside) => {" \
"  const tokens = inside.split(',').map(t => t.trim()).filter(Boolean)" \
"    .filter(tok => tok.split(/\\s+/)[0] !== 'TIMESLICE_MS');" \
"  if (tokens.length === 0) return '';" \
"  return `import { ${tokens.join(', ')} } from '$lib/constants/audio';`;" \
"});" \
"" \
"// Ensure single explicit import at top" \
"if (!/import\\s*\\{[^}]*\\bTIMESLICE_MS\\b[^}]*\\}\\s*from\\s*['\"]\\$lib\\/constants\\/audio['\"]/ .test(s)) {" \
"  s = `import { TIMESLICE_MS } from '$lib/constants/audio';\\n` + s;" \
"}" \
"" \
"fs.writeFileSync(file, s);" \
"console.log('navigator.ts normalized');" \
          > prepatch-navigator.mjs
          node prepatch-navigator.mjs

      - name: Install Tauri CLI
        run: |
          bun add -g @tauri-apps/cli@latest
          bun --version
          tauri -V || true

      - name: Build (Tauri)
        working-directory: epicenter-up/apps/whispering
        env:
          CI: "true"
        run: |
          echo "PATH=$PATH"
          which bun || true
          which tauri || true
          bun tauri build || bunx --bun tauri build

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: whispering-windows-with-tray
          path: |
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.msi
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.exe
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.zip
