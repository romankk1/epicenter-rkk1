name: Build Windows Tray v8h

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone upstream epicenter (latest main)
        run: |
          git clone https://github.com/epicenter-md/epicenter.git epicenter-up
          cd epicenter-up
          git fetch --all --prune
          git checkout origin/main -B tray-build

      - name: Add tray feature remote & fetch
        run: |
          cd epicenter-up
          git remote add tray https://github.com/vishesh-sachan/epicenter.git || true
          git fetch tray feature/minimize-to-tray

      - name: Merge tray feature (prefer tray)
        run: |
          cd epicenter-up
          git config user.name "tray-bot"
          git config user.email "tray-bot@users.noreply.github.com"
          git merge --no-edit -X theirs tray/feature/minimize-to-tray || true
          git add -A || true
          git commit -m "Temp merge: upstream main + tray feature for build" || true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable

      - name: Install WiX Toolset
        shell: pwsh
        run: |
          choco install wixtoolset --yes --no-progress || $true
          $candle = (Get-Command candle.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $candle) {
            $guess = Get-ChildItem "C:\Program Files (x86)" -Filter "WiX Toolset v3.*" -Directory -ErrorAction SilentlyContinue |
                     ForEach-Object { Join-Path $_.FullName "bin\candle.exe" } |
                     Where-Object { Test-Path $_ } |
                     Select-Object -First 1
            if ($guess) { $env:Path = "$env:Path;$(Split-Path $guess)" }
          }
          Write-Host "WiX ready"

      - name: Install NSIS
        shell: pwsh
        run: |
          choco install nsis --yes --no-progress
          $p1 = 'C:\Program Files (x86)\NSIS\makensis.exe'
          $p2 = 'C:\Program Files\NSIS\makensis.exe'
          if (Test-Path $p1) { $env:Path = "$env:Path;$(Split-Path $p1)" }
          elseif (Test-Path $p2) { $env:Path = "$env:Path;$(Split-Path $p2)" }
          Write-Host "NSIS ready"

      - name: Cache Bun
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('epicenter-up/**/bun.lock') }}
          restore-keys: ${{ runner.os }}-bun-

      - name: Install deps
        working-directory: epicenter-up
        run: bun install

      - name: "Prepatch (spans, ffmpeg, imports, navigator, transformer)"
        working-directory: epicenter-up/apps/whispering
        run: |
          set -e

          # 1) Fix self-closing <span />
          F="src/routes/(config)/settings/transcription/+page.svelte"
          if [ -f "$F" ]; then
            sed -E -i 's#<span([^>]*)/>#<span\1></span>#g' "$F"
            echo "Fixed <span/> in $F"
          fi

          # 2) Create check-ffmpeg shims (both locations)
          mkshim() {
            target="$1"
            if [ ! -f "$target" ]; then
              mkdir -p "$(dirname "$target")"
              printf "export type FfmpegCheck = { available: boolean; version?: string; error?: string };\nexport async function checkFfmpeg(): Promise<FfmpegCheck> { return { available: true, version: 'CI' }; }\nexport default checkFfmpeg;\n" > "$target"
              echo "Created shim $target"
            fi
          }
          mkshim "src/routes/(config)/+layout/check-ffmpeg.ts"
          mkshim "src/routes/+layout/check-ffmpeg.ts"

          # 3) Patch imports in commands.ts (wellcrafted/result + nanoid)
          C="src/lib/query/commands.ts"
          if [ -f "$C" ]; then
            tmp="$(mktemp)"
            grep -v -E "^[[:space:]]*import[[:space:]]*\{[^}]*\}[[:space:]]*from[[:space:]]*['\"]wellcrafted/result['\"];?[[:space:]]*$" "$C" > "$tmp" || true
            mv "$tmp" "$C"
            sed -i "1i import { Err, Ok } from 'wellcrafted/result';" "$C"

            tmp="$(mktemp)"
            grep -v -E "^[[:space:]]*import[[:space:]]*\{[[:space:]]*nanoid[[:space:]]*\}[[:space:]]*from[[:space:]]*['\"]nanoid(/non-secure)?['\"];?[[:space:]]*$" "$C" > "$tmp" || true
            mv "$tmp" "$C"
            sed -i "1i import { nanoid } from 'nanoid/non-secure';" "$C"

            echo "Patched imports in $C"
          fi

          # 4) navigator.ts — rimuovi QUALSIASI dichiarazione locale e QUALSIASI presenza di TIMESLICE_MS in import multi-line
          N="src/lib/services/recorder/navigator.ts"
          if [ -f "$N" ]; then
            # Assicura un singolo import esplicito di TIMESLICE_MS add-on (lo mettiamo in cima)
            if ! grep -q "\$lib/constants/audio" "$N"; then
              sed -i "1i import { TIMESLICE_MS } from '\$lib/constants/audio';" "$N"
            else
              # Aggiungi comunque un import standalone di TIMESLICE_MS in cima: poi lo togliamo dalle altre import lists
              grep -q "import[[:space:]]*\{[^{]*TIMESLICE_MS" "$N" || sed -i "1i import { TIMESLICE_MS } from '\$lib/constants/audio';" "$N"
            fi

            # 4a) elimina qualunque dichiarazione locale (const/let/var, anche destrutturazioni)
            sed -E -i '/^[[:space:]]*(export[[:space:]]+)?(const|let|var)[[:space:]]+TIMESLICE_MS([[:space:]=,]|$)/d' "$N"
            sed -E -i '/^[[:space:]]*(export[[:space:]]+)?(const|let|var)[[:space:]]+\{[^}]*\bTIMESLICE_MS\b[^}]*\}[[:space:]=]/d' "$N"

            # 4b) RIMUOVI TIMESLICE_MS da TUTTI i blocchi import che puntano a $lib/constants/audio (anche multi-line)
            #    - Applichiamo la pulizia su ogni riga compresa tra "import {" e la riga "from '$lib/constants/audio'"
            #    - Poi ripuliamo virgole e parentesi residue.
            awk '
              BEGIN { inblk=0 }
              {
                line=$0
                if (inblk==0 && line ~ /^[[:space:]]*import[[:space:]]*\{/ ) { inblk=1 }
                if (inblk==1) {
                  # se nella riga compare TIMESLICE_MS, rimuovi token + eventuali virgole e spazi
                  gsub(/(^|[[:space:]]|,)[[:space:]]*TIMESLICE_MS([[:space:]]*,|[[:space:]]|$)/,"\\1",line)
                  # comprimi doppie virgole / "{ ,", ", }"
                  gsub(/\{[[:space:]]*,[[:space:]]*/,"{",line)
                  gsub(/[[:space:]]*,[[:space:]]*\}/,"}",line)
                  gsub(/,[[:space:]]*,/,", ",line)
                }
                print line
                if (inblk==1 && line ~ /from[[:space:]]*['""]\$lib\/constants\/audio['""]/ ) { inblk=0 }
              }
            ' "$N" > "$N.tmp" && mv "$N.tmp" "$N"

            echo "Navigator imports cleaned in $N"
          fi

          # 5) transformer.ts — dedupe both wellcrafted/error and wellcrafted/result
          T="src/lib/query/transformer.ts"
          if [ -f "$T" ]; then
            tmp="$(mktemp)"
            grep -v -E "^[[:space:]]*import[[:space:]]*\{[^}]*\}[[:space:]]*from[[:space:]]*['\"]wellcrafted/(error|result)['\"];?[[:space:]]*$" "$T" > "$tmp" || true
            mv "$tmp" "$T"
            # Inserisci le due import standard all'inizio
            sed -i "1i import { createTaggedError, extractErrorMessage } from 'wellcrafted/error';" "$T"
            sed -i "2i import { Err, Ok, type Result, isErr } from 'wellcrafted/result';" "$T"
            echo "Patched imports in $T"
          fi

      - name: Install Tauri CLI
        run: |
          bun add -g @tauri-apps/cli@latest
          bun --version
          tauri -V || true

      - name: Build (Tauri)
        working-directory: epicenter-up/apps/whispering
        env:
          CI: "true"
        run: |
          echo "PATH=$PATH"
          which bun || true
          which tauri || true
          bun tauri build || bunx --bun tauri build

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: whispering-windows-with-tray
          path: |
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.msi
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.exe
            epicenter-up/apps/whispering/src-tauri/target/release/bundle/**/*.zip
