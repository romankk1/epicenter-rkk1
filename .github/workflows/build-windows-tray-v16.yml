name: Build Windows Tray v16 (with Vulkan via winget)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    env:
      NODE_ENV: "production"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Tauri CLI (global)
        run: |
          bun add -g @tauri-apps/cli
          tauri -V

      - name: Install Vulkan SDK (LunarG) via winget
        run: |
          # Aggiorna sorgenti e installa ultimo Vulkan SDK LunarG in silenzioso
          winget source update
          winget install --id LunarG.VulkanSDK --accept-package-agreements --accept-source-agreements --silent

          # Trova la cartella C:\VulkanSDK\<versione>
          $root = "C:\VulkanSDK"
          if (!(Test-Path $root)) { throw "VulkanSDK root non trovato in $root" }
          $dirs = Get-ChildItem $root -Directory | Sort-Object Name -Descending
          if ($dirs.Count -eq 0) { throw "Nessuna versione VulkanSDK trovata in $root" }
          $sdk = $dirs[0].FullName

          # Esporta variabili per questo job
          echo "VULKAN_SDK=$sdk" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          echo "VK_SDK_PATH=$sdk" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          # Aggiorna PATH per headers/bin/lib
          $bin = Join-Path $sdk "Bin"
          $lib = Join-Path $sdk "Lib"
          $include = Join-Path $sdk "Include"
          echo "PATH=$bin;$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          Write-Host "✅ Vulkan SDK installato in $sdk"
          Write-Host "VULKAN_SDK=$sdk"
          Write-Host "BIN=$bin"
          Write-Host "LIB=$lib"
          Write-Host "INCLUDE=$include"

      # (Opzionale ma utile) Crea lo shim mancante che Svelte importa in alcune pagine
      - name: Add FFmpeg check shim (to avoid missing import)
        run: |
          $ffmpegPath = "apps/whispering/src/routes/(config)/+layout/check-ffmpeg.ts"
          $ffmpegDir = Split-Path $ffmpegPath
          if (-not (Test-Path $ffmpegDir)) { New-Item -ItemType Directory -Force -Path $ffmpegDir | Out-Null }
          $content = @"
export type FfmpegCheck = { available: boolean; version?: string; error?: string };

export async function checkFfmpeg(): Promise<FfmpegCheck> {
  return { available: true, version: "CI" };
}
export function hasNavigatorLocalTranscriptionIssue(): boolean {
  return false;
}
export default checkFfmpeg;
"@
          Set-Content -Path $ffmpegPath -Value $content -NoNewline
          Write-Host "✅ FFmpeg shim written at $ffmpegPath"

      - name: Install JS deps (root)
        run: |
          bun install --frozen-lockfile
          Write-Host "✅ Root deps installed"

      # Costruiamo SOLO Whispering (evita errori da altri pacchetti)
      - name: Build Whispering (SSR)
        working-directory: apps/whispering
        run: |
          bun run build
          Write-Host "✅ Whispering SSR built"

      - name: Build Tauri (Windows)
        working-directory: apps/whispering
        env:
          # Assicuriamoci che le var Vulkan siano disponibili anche qui
          VULKAN_SDK: ${{ env.VULKAN_SDK }}
          VK_SDK_PATH: ${{ env.VK_SDK_PATH }}
          NODE_ENV: "production"
        run: |
          tauri build
          Write-Host "✅ Tauri build done"

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: whispering-windows-with-tray
          path: apps/whispering/src-tauri/target/release/*.exe
